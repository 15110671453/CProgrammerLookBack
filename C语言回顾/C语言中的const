C语言中的const理解 以及 指针的使用理解
const 是C语言中的类型修饰符

常见的数据类型的修饰符

short long unsigned signed static

auto extern register

定义一个变量
类型描述符 变量名
类型描述符 包括 类型的修饰符以及数据类型 
int
chart float

1、类型描述符中如果有多个关键字 它们
出现的位置并不影响他对变量的限制

const int a 
int const a
static int short i
int static short i

int short i

short int i

完全一样 位置无关

2、类型描述符中const出现的位置 对指针变量有影响
[]()*在数据定义时与在表达式中优先级一样的的理解
int*a[10]//因为[]优先级高于* 因此是一个数组 数组成员为指针 指向一个int类型的数据
int(*a)[10]//因为()优先级高于[]，因此，先看里面 是一个指针，指向的
类型为一个数组

3、指针判断从右向左看

const int * a//a 是变量 * 表示它是一个指针（数据类型是指针 已经确定）a 是指针变量 余下的是指向的类型 a是一个指向const int 的指针
即 指向的数据不可修改

int * const a //* const 一起来修饰a a是const的只读变量 并且数据类型是指针 指向的数据类型为int类型 即a只读 因此这是一个只读的指针 指向的类型是int 型的变量

int const* const a //* 表示指针 因此指针不可修改 int const 是指针指向的类型 仍然是const

 4、typedef void* VP

 typedef 不可以创建数据类型 但是他可以为
 数据类型起别名

 const void * ptr 存储位置
 const VP ptr
 首先 理解typedef是定义一种数据类型
 一定要于define区分开
 typedef void* VP //VP是类型名字
 余下的是这个变量的真实类型


const VP ptr
是不是替换为const void * ptr 不是 void * 是一个整体
const int i == int const i

VP const ptr 应该理解为 void * const ptr;

如果不是typedef 而是define的话 就是简单的替换 需要注意

作用
1、向程序员传递一个信息 这个不要修改
2、有可能让编译器产生更精简紧凑的代码 减少bug
3、合理的保护我们的只读的数据 避免不必要的错误
使用位置
1、定义常量 防止修改
2、函数的参数重 如果不期望子函数去修改被调用函数的某个数据
可以加以限制
例如
char* strcpy(char* dest,const char* src)
char* strncpy(char* dest,const char*src ,size_t n)
3、在c++中 类的成员函数的使用



















